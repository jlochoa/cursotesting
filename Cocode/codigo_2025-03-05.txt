// Base.cs - 15:50
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WebDriverManager.DriverConfigs.Impl;
using NUnit.Framework;
using AventStack.ExtentReports;
using AventStack.ExtentReports.Reporter;
using NUnit.Framework.Interfaces;
using AventStack.ExtentReports.Model;

namespace WebApiAlmacen.E2E.Utils
{
    [TestFixture]
    public class Base
    {
        public IWebDriver driver;
        public ExtentReports extent;
        public ExtentTest test;

        [OneTimeSetUp]
        public void Setup()
        {
            string workingDirectory = Environment.CurrentDirectory;
            string projectDirectory = Directory.GetParent(workingDirectory).Parent.Parent.FullName;
            string reportPath = projectDirectory + "//index.html";
            var htmlReporter = new ExtentSparkReporter(reportPath);
            extent = new ExtentReports();
            extent.AttachReporter(htmlReporter);
            extent.AddSystemInfo("Host Name", "Localhost");
            extent.AddSystemInfo("Environment", "QA");
            extent.AddSystemInfo("Username", "Juan Luis");
        }

        [SetUp]
        public void StartBrowser()
        {
            test = extent.CreateTest(TestContext.CurrentContext.Test.Name);

            InitBrowser("Edge");

            // La espera implícita en Selenium se usa para decirle al controlador web que espere una cierta cantidad de tiempo antes de que arroje una
            // excepción sin un elemento no está. También se pueden configurar tiempos de espera explícitos
            // que pausen la prueba y se reanude cuando un elemente cumpla una condición
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

            driver.Manage().Window.Maximize();
            driver.Url = "http://localhost:4200/login";
        }

        public void InitBrowser(string browserName)
        {
            switch (browserName)
            {
                case "Firefox":
                    new WebDriverManager.DriverManager().SetUpDriver(new FirefoxConfig());
                    driver = new FirefoxDriver();
                    break;
                case "Chrome":
                    new WebDriverManager.DriverManager().SetUpDriver(new ChromeConfig());
                    driver = new ChromeDriver();
                    break;
                case "Edge":
                    new WebDriverManager.DriverManager().SetUpDriver(new EdgeConfig());
                    driver = new EdgeDriver();
                    break;
            }
        }

        [TearDown]
        public void TearDown()
        {
            var status = TestContext.CurrentContext.Result.Outcome.Status;
            var stackTrace = TestContext.CurrentContext.Result.StackTrace;

            DateTime time = DateTime.Now;
            string fileName = "Screenshot_" + time.ToString("h_mm_ss") + ".png";

            if (status == TestStatus.Failed)
            {
                test.Log(Status.Fail, "Test fallido: " + stackTrace);
                test.Fail("Test fallido", captureScreenShot(driver, fileName));
                test.Fail("Test fallido");
            }

            extent.Flush();
            driver.Dispose();
        }

        public Media captureScreenShot(IWebDriver driver, string screenShotName)
        {
            ITakesScreenshot ts = (ITakesScreenshot)driver;
            var screenshot = ts.GetScreenshot().AsBase64EncodedString;
            return MediaEntityBuilder.CreateScreenCaptureFromBase64String(screenshot, screenShotName).Build();
        }
    }

}


****************************************

// LoginPage.cs - 15:50
using OpenQA.Selenium;
using SeleniumExtras.PageObjects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WebApiAlmacen.E2E.PageSpecs
{
    public class LoginPage
    {
        private IWebDriver driver;

        public LoginPage(IWebDriver driver)
        {
            this.driver = driver;
            PageFactory.InitElements(driver, this);
        }
        // Elementos de la página

        [FindsBy(How = How.Name, Using = "email")]
        private IWebElement email;

        [FindsBy(How = How.Name, Using = "password")]
        private IWebElement password;

        [FindsBy(How = How.TagName, Using = "button")]
        private IWebElement loginButton;

        public IWebElement getEmail()
        {
            return email;
        }

        public IWebElement getPassword()
        {
            return password;
        }

        public FamiliasPage validLogin(string user, string pass)
        {
            email.SendKeys(user);
            password.SendKeys(pass);
            loginButton.Click();
            return new FamiliasPage(driver);
        }

        public void clearInputs()
        {
            email.SendKeys("");
            password.SendKeys("");
        }
    }
}


****************************************

// FamiliasPage.cs - 15:51
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium;
using SeleniumExtras.PageObjects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WebApiAlmacen.E2E.PageSpecs
{
    public class FamiliasPage
    {
        private IWebDriver driver;

        public FamiliasPage(IWebDriver driver)
        {
            this.driver = driver;
            PageFactory.InitElements(driver, this);
        }
        // Elementos de la página

        [FindsBy(How = How.Name, Using = "nombre")]
        private IWebElement inputNombre;

        public IWebElement getInputNombre()
        {
            return inputNombre;
        }

        public void waitForPageDisplay()
        {
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(5));
            wait.Until(SeleniumExtras.WaitHelpers.ExpectedConditions.ElementIsVisible(By.Name("nombre")));
        }
    }
}


****************************************

// PROFE - LoginTest.cs - 15:57
    public class LoginTest : Base
    {
        private static IEnumerable<TestCaseData> GetUsuarios()
        {
           return new List<TestCaseData>
    		{
        	new TestCaseData("jl@gmail.com", "123456"),
        	new TestCaseData("prueba@hotmail.com", "123456")
    		};
        }

        [Test, TestCaseSource(nameof(GetUsuarios))]
        public void Test(string usuario, string password)
        {
            LoginPage loginPage = new LoginPage(getDriver());
            loginPage.getUsuario().Clear();
            loginPage.getPassword().Clear();
            FamiliasPage familiasPage = loginPage.validLogin(usuario, password);
            familiasPage.waitForPageDisplay();
        }
    }

****************************************

// Paquetes instalados - 16:07
 <ItemGroup>
   <PackageReference Include="coverlet.collector" Version="6.0.0" />
   <PackageReference Include="DotNetSeleniumExtras.PageObjects" Version="3.11.0" />
   <PackageReference Include="DotNetSeleniumExtras.PageObjects.Core" Version="4.14.1" />
   <PackageReference Include="ExtentReports" Version="5.0.4" />
   <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.8.0" />
   <PackageReference Include="NUnit" Version="3.14.0" />
   <PackageReference Include="NUnit.Analyzers" Version="3.9.0" />
   <PackageReference Include="NUnit3TestAdapter" Version="4.5.0" />
   <PackageReference Include="Selenium.Support" Version="4.29.0" />
   <PackageReference Include="Selenium.WebDriver.WebDriverFactoryNunitConfig" Version="4.1.0" />
   <PackageReference Include="SeleniumExtras.WaitHelpers" Version="1.0.2" />
   <PackageReference Include="WebDriverManager" Version="2.17.5" />
 </ItemGroup>

****************************************

