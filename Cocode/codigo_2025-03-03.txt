// PROFE - Agregar  a WebApiAlmacen.E2E - 15:56
Agregamos los paquetes Nuget Selenium.WebDriver, Selenium.WebDriverManager, SeleniumExtras.WaitHelpers y Selenium.Support

****************************************

// PROFE - TestBrowser.cs - 16:00
 public class TestBrowser
  {
      IWebDriver driver;

      [SetUp]
      public void Setup()
      {
          // Selenium se comunica con el driver de Chrome mediante el driver
          // ChromeDriver chromeDriver = new ChromeDriver();
          // Mediante WebDriverManager, Selenium emplea "al vuelo" el driver del navegador según su versión y configuración
          // new DriverManager().SetUpDriver(new ChromeConfig());
          // new WebDriverManager.DriverManager().SetUpDriver(new FirefoxConfig());
          new DriverManager().SetUpDriver(new EdgeConfig());
          // driver = new FirefoxDriver();
          // driver = new ChromeDriver();
          driver = new EdgeDriver();

          driver.Manage().Window.Maximize();

      }

      [Test]
      public void Test1()
      {
          driver.Url = "https://elpais.com/";
          TestContext.Progress.WriteLine(driver.Title);
          TestContext.Progress.WriteLine(driver.Url);
          Assert.IsTrue(driver.Title.Contains("EL PAÍS"), "El título de la página no es correcto");
          driver.Close();
      }

      [TearDown]
      public void TearDown()
      {
          driver.Dispose();
      }
  }


****************************************

// PROFE - SelectDOMElements.cs - 16:11
 public class SelectDOMElements
    {
        IWebDriver driver;

        [SetUp]

        public void Setup()
        {
            new WebDriverManager.DriverManager().SetUpDriver(new EdgeConfig());
            driver = new EdgeDriver();

            // La espera implícita en Selenium se usa para decirle al controlador web que espere una cierta cantidad de 				tiempo antes de que arroje una
            // excepción sin un elemento no está. También se pueden configurar tiempos de espera explícitos
            // que pausen la prueba y se reanude cuando un elemente cumpla una condición
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

            driver.Manage().Window.Maximize();
            driver.Url = "http://localhost:4200/login";
        }

        [Test]
        public void Test()
        {
            driver.FindElement(By.Name("email")).Clear();
            driver.FindElement(By.Name("email")).SendKeys("jl@gmail.com");
            driver.FindElement(By.Name("password")).Clear();
            driver.FindElement(By.Name("password")).SendKeys("123456");
            // driver.FindElement(By.ClassName("btn-lg")).Click();
            IWebElement button = driver.FindElement(By.TagName("button"));
            button.Click();
        }

        [TearDown]
        public void TearDown()
        {
            driver.Dispose();
        }
    }



****************************************

// PROFE - Base.cs - 16:25
public class Base
    {
        public IWebDriver driver;

        [SetUp]
        public void StartBrowser()
        {
            InitBrowser("Firefox");

            // La espera implícita en Selenium se usa para decirle al controlador web que espere una cierta cantidad de tiempo antes de que arroje una
            // excepción sin un elemento no está. También se pueden configurar tiempos de espera explícitos
            // que pausen la prueba y se reanude cuando un elemente cumpla una condición
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

            driver.Manage().Window.Maximize();
            driver.Url = "http://localhost:4200/login";
        }

        public void InitBrowser(string browserName)
        {
            switch (browserName)
            {
                case "Firefox":
                    new WebDriverManager.DriverManager().SetUpDriver(new FirefoxConfig());
                    driver = new FirefoxDriver();
                    break;
                case "Chrome":
                    new WebDriverManager.DriverManager().SetUpDriver(new ChromeConfig());
                    driver = new ChromeDriver();
                    break;
                case "Edge":
                    new WebDriverManager.DriverManager().SetUpDriver(new EdgeConfig());
                    driver = new EdgeDriver();
                    break;
            }
        }

 	[TearDown]
 	public void TearDown()
 	{
     	driver.Dispose();
 	}

    }


****************************************

// PROFE - LoginTest.cs - 16:29
 public class LoginTest : Base
    {
        [Test]
        public void Test()
        {
            driver.FindElement(By.Id("email")).Clear();
            driver.FindElement(By.Id("email")).SendKeys("jlochoa@gmail.com");
            driver.FindElement(By.Name("password")).Clear();
            driver.FindElement(By.Name("password")).SendKeys("123456");
        }

        [TearDown]
        public void AfterTest()
        {
            driver.Quit();
        }
    }

****************************************

// PROFE - LoginPage.cs - 16:34
    public class LoginPage
    {
        private IWebDriver driver;

        public LoginPage(IWebDriver driver)
        {
            this.driver = driver;
            PageFactory.InitElements(driver, this);
        }
        // Elementos de la página

        [FindsBy(How = How.Name, Using = "email")]
        private IWebElement email;

        [FindsBy(How = How.Name, Using = "password")]
        private IWebElement password;

        [FindsBy(How = How.TagName, Using = "button")]
        private IWebElement loginButton;

        public IWebElement getEmail()
        {
            return email;
        }

        public IWebElement getPassword()
        {
            return password;
        }
    }

****************************************

// PROFE - Agregar paquetes para especificaciones independientes de páginas - 16:36
DotNetSeleniumExtras.PageObjects y DotNetSeleniumExtras.PageObjects.Core

****************************************

// PROFE - LoginTest.cs - 16:40
public class LoginTest : Base
    {        
	[Test]
        public void Test()
        {
            LoginPage loginPage = new LoginPage(driver);
            loginPage.getEmail().Clear();
            loginPage.getEmail().SendKeys("jl@gmail.com");
            loginPage.getPassword().Clear();
            loginPage.getPassword().SendKeys("123456");
        }
    }


****************************************

// PROFE - LoginPage.cs - 16:44
  public void validLogin(string user, string pass)
        {
            email.SendKeys(user);
            password.SendKeys(pass);
            loginButton.Click();
        }

****************************************

// PROFE - LoginTest.cs - 16:46
        [Test]
        public void Test()
        {
            LoginPage loginPage = new LoginPage(driver);
            loginPage.getUsuario().Clear();
            loginPage.getPassword().Clear();
            //loginPage.getUsuario().SendKeys("jl@gmail.com");
            //loginPage.getPassword().SendKeys("123456");
            loginPage.validLogin("jl@gmail.com", "123456");
        }

****************************************

// PROFE - FamiliasPage.cs - 16:57
    public class FamiliasPage
    {
        private IWebDriver driver;

        public FamiliasPage(IWebDriver driver)
        {
            this.driver = driver;
            PageFactory.InitElements(driver, this);
        }
        // Elementos de la página

        [FindsBy(How = How.Name, Using = "nombre")]
        private IWebElement inputNombre;

        public IWebElement getInputNombre()
        {
            return inputNombre;
        }

        public void waitForPageDisplay()
        {
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(5));
            wait.Until(SeleniumExtras.WaitHelpers.ExpectedConditions.ElementIsVisible(By.Name("nombre")));
        }
    }

****************************************

// PROFE - LoginPage.cs - 16:59
        public FamiliasPage validLogin(string user, string pass)
        {
            email.SendKeys(user);
            password.SendKeys(pass);
            loginButton.Click();
            return new FamiliasPage(driver);
        }

****************************************

// PROFE - LoginTest.cs - 17:00
...
 FamiliasPage familiasPage = loginPage.validLogin("jl@gmail.com", "123456");
            familiasPage.waitForPageDisplay();


****************************************

// PROFE - Informes para test E2E - 17:10
https://www.extentreports.com/docs/versions/4/net/


****************************************

// PROFE - Agregar paquete para informes - 17:11
ExtentReports

****************************************

// PROFE - Base.cs - 17:12
 public class Base
    {
	...
	public ExtentReports extent;
        public ExtentTest test;

        [OneTimeSetUp]
        public void Setup()
        {
            string workingDirectory = Environment.CurrentDirectory;
            string projectDirectory = Directory.GetParent(workingDirectory).Parent.Parent.FullName;
            string reportPath = projectDirectory + "//index.html";
            var htmlReporter = new ExtentSparkReporter(reportPath);
            extent = new ExtentReports();
            extent.AttachReporter(htmlReporter);
            extent.AddSystemInfo("Host Name", "Localhost");
            extent.AddSystemInfo("Environment", "QA");
            extent.AddSystemInfo("Username", "Juan Luis");
        }

 	[SetUp]
        public void StartBrowser()
        {
            test = extent.CreateTest(TestContext.CurrentContext.Test.Name);
           ...
        }

...
 	[TearDown]
        public void AfterTest()
        {
            var status = TestContext.CurrentContext.Result.Outcome.Status;
            var stackTrace = TestContext.CurrentContext.Result.StackTrace;

            DateTime time = DateTime.Now;
            string fileName = "Screenshot_" + time.ToString("h_mm_ss") + ".png";

            if (status == TestStatus.Failed)
            {
                test.Log(Status.Fail, "Test fallido: " + stackTrace);
                test.Fail("Test fallido", captureScreenShot(driver.Value, fileName));
                test.Fail("Test fallido");
            }

            extent.Flush();
            driver.Dispose();
        }

        public Media captureScreenShot(IWebDriver driver, string screenShotName)
        {
            ITakesScreenshot ts = (ITakesScreenshot)driver;
            var screenshot = ts.GetScreenshot().AsBase64EncodedString;
            return MediaEntityBuilder.CreateScreenCaptureFromBase64String(screenshot, screenShotName).Build();
        }


****************************************

